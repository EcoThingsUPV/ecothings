{"category":"HCSR04","color":"#df4a3a","blocks":["__HCSR04_Initialize","__HCSR04_GetDistance","__HCSR04_MeasureDistance"],"jscode":"// Block __HCSR04_Initialize\nvar __HCSR04_Initialize_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Initialize HCSR04 distance sensor:\"\n        },\n        {\n            \"type\": \"field_image\",\n            \"src\": \"https://raw.githubusercontent.com/Erriez/ErriezHCSR04/master/extras/HC-SR04.png\",\n            \"width\": 60,\n            \"height\": 30,\n            \"alt\": \"*\"\n    }\n    ],\n    \"colour\": \"#df4a3a\"\n};\n\nwindow['Blockly'].Blocks['__HCSR04_Initialize'] = {\n    init: function() {\n        this.jsonInit(__HCSR04_Initialize_json);\n        this.appendValueInput('Trigger_pin')\n            .setCheck('Number')\n            .appendField('Trigger pin')\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(new Blockly.FieldImage(\n                \"https://www.shareicon.net/download/2016/11/14/851994_up_512x512.png\",\n                20,\n                20,\n                \"*\"));\n        this.appendValueInput('Echo_pin')\n            .setCheck('Number')\n            .appendField('Echo pin')\n            .setAlign(Blockly.ALIGN_RIGHT)\n            .appendField(new Blockly.FieldImage(\n                \"https://cdn2.iconfinder.com/data/icons/language-learning/24/Mesa_de_trabajo_7-512.png\",\n                25,\n                25,\n                \"*\"));\n    }\n};\n\nwindow['Blockly'].Python['__HCSR04_Initialize'] = function(block) {\n    var Trigger_pin = Blockly.Python.valueToCode(block, 'Trigger_pin', Blockly.Python.ORDER_NONE);\nvar Echo_pin = Blockly.Python.valueToCode(block, 'Echo_pin', Blockly.Python.ORDER_NONE);\n    return `import machine, time\nfrom machine import Pin\n\nglobal pulse_time\nglobal dist_cm\nglobal dist_mm\n\necho_timeout_us=500*2*30\ntrigger = Pin(${Trigger_pin}, mode=Pin.OUT, pull=None)\ntrigger.value(0)\n\necho = Pin(${Echo_pin}, mode=Pin.IN, pull=None)` + \"\\n\";\n};\n\n// Block __HCSR04_GetDistance\nvar __HCSR04_GetDistance_json = {\n    \"output\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get distance in \"\n        },\n        {\n            \"type\": \"field_dropdown\",\n            \"name\": \"distance\",\n            \"options\": [\n                [ \"cm\", \"dist_cm\" ],\n                [ \"mm\", \"dist_mm\" ]\n            ]\n        }\n    ],\n    \"colour\": \"#df4a3a\"\n};\n\nwindow['Blockly'].Blocks['__HCSR04_GetDistance'] = {\n    init: function() {\n        this.jsonInit(__HCSR04_GetDistance_json);\n    }\n};\n\nwindow['Blockly'].Python['__HCSR04_GetDistance'] = function(block) {\n        var distance = block.getFieldValue('distance');\n        return [`${distance}`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __HCSR04_MeasureDistance\nvar __HCSR04_MeasureDistance_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Measure current distance\"\n        },\n        {\n            \"type\": \"field_image\",\n            \"src\": \"https://cdn-icons-png.flaticon.com/512/1189/1189097.png\",\n            \"width\": 20,\n            \"height\": 20,\n            \"alt\": \"*\"\n        }\n    ],\n    \"colour\": \"#df4a3a\"\n};\n\nwindow['Blockly'].Blocks['__HCSR04_MeasureDistance'] = {\n    init: function() {\n        this.jsonInit(__HCSR04_MeasureDistance_json);\n    }\n};\n\nwindow['Blockly'].Python['__HCSR04_MeasureDistance'] = function(block) {\n        return `trigger.value(0) # Stabilize the sensor\ntime.sleep_us(5)\ntrigger.value(1)\n# Send a 10us pulse.\ntime.sleep_us(10)\ntrigger.value(0)\npulse_time = machine.time_pulse_us(echo, 1, echo_timeout_us)\ndist_cm = (pulse_time / 2) / 29.1\ndist_mm = pulse_time * 100 // 582` + \"\\n\";\n};\n\n\n","code":{"Initialize":["window['Blockly'].Python['__HCSR04_Initialize'] = function(block) {\n    var Trigger_pin = Blockly.Python.valueToCode(block, 'Trigger_pin', Blockly.Python.ORDER_NONE);\nvar Echo_pin = Blockly.Python.valueToCode(block, 'Echo_pin', Blockly.Python.ORDER_NONE);\n    return `import machine, time\nfrom machine import Pin\n\nglobal pulse_time\nglobal dist_cm\nglobal dist_mm\n\necho_timeout_us=500*2*30\ntrigger = Pin(${Trigger_pin}, mode=Pin.OUT, pull=None)\ntrigger.value(0)\n\necho = Pin(${Echo_pin}, mode=Pin.IN, pull=None)` + \"\\n\";\n};\n\n","import machine, time\nfrom machine import Pin\n\nglobal pulse_time\nglobal dist_cm\nglobal dist_mm\n\necho_timeout_us=500*2*30\ntrigger = Pin(${Trigger_pin}, mode=Pin.OUT, pull=None)\ntrigger.value(0)\n\necho = Pin(${Echo_pin}, mode=Pin.IN, pull=None)"],"GetDistance":["window['Blockly'].Python['__HCSR04_GetDistance'] = function(block) {\n        var distance = block.getFieldValue('distance');\n        return [`${distance}`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","${distance}"],"MeasureDistance":["window['Blockly'].Python['__HCSR04_MeasureDistance'] = function(block) {\n        return `trigger.value(0) # Stabilize the sensor\ntime.sleep_us(5)\ntrigger.value(1)\n# Send a 10us pulse.\ntime.sleep_us(10)\ntrigger.value(0)\npulse_time = machine.time_pulse_us(echo, 1, echo_timeout_us)\ndist_cm = (pulse_time / 2) / 29.1\ndist_mm = pulse_time * 100 // 582` + \"\\n\";\n};\n\n","trigger.value(0) # Stabilize the sensor\ntime.sleep_us(5)\ntrigger.value(1)\n# Send a 10us pulse.\ntime.sleep_us(10)\ntrigger.value(0)\npulse_time = machine.time_pulse_us(echo, 1, echo_timeout_us)\ndist_cm = (pulse_time / 2) / 29.1\ndist_mm = pulse_time * 100 // 582"]}}