{"category":"gas","color":"#00ffff","blocks":["__gas_MQ2_CO_read","__gas_MQ2_calib","__gas_MQ2_get_r0"],"jscode":"// Block __gas_MQ2_CO_read\nvar __gas_MQ2_CO_read_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"MQ2 CO Read\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PIN\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"PIN\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"R0\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"R0\"\n        }\n    ],\n    \"colour\": \"#00ffff\"\n};\n\nwindow['Blockly'].Blocks['__gas_MQ2_CO_read'] = {\n    init: function() {\n        this.jsonInit(__gas_MQ2_CO_read_json);\n    }\n};\n\nwindow['Blockly'].Python['__gas_MQ2_CO_read'] = function(block) {\n    var PIN = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_NONE);\nvar R0 = Blockly.Python.valueToCode(block, 'R0', Blockly.Python.ORDER_NONE);\n    return [`int((((math.log10(((4096-analogRead(${PIN}))/ analogRead(${PIN}))/${R0}) - 0.716003343634799) / -0.335423996010616 + 2.301029995663981)*100))`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __gas_MQ2_calib\nvar __gas_MQ2_calib_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"MQ2 Calibrate R0\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PIN\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"PIN\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"N\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"N\"\n        }\n    ],\n    \"colour\": \"#00ffff\"\n};\n\nwindow['Blockly'].Blocks['__gas_MQ2_calib'] = {\n    init: function() {\n        this.jsonInit(__gas_MQ2_calib_json);\n    }\n};\n\nwindow['Blockly'].Python['__gas_MQ2_calib'] = function(block) {\n    var PIN = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_NONE);\nvar N = Blockly.Python.valueToCode(block, 'N', Blockly.Python.ORDER_NONE);\n    return `global _r0 \n_r0 = 0\nfor i in (1 <= float(${N})) and upRange(1, float(${N}), 1) or downRange(1, float(${N}), 1):\n    _r0 = _r0 + (4096-analogRead(${PIN}))/analogRead(${PIN})\n    wait_ms(50)\n_r0 = _r0 / ${N}` + \"\\n\";\n};\n\n// Block __gas_MQ2_get_r0\nvar __gas_MQ2_get_r0_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Get R0\"\n        }\n    ],\n    \"colour\": \"#00ffff\"\n};\n\nwindow['Blockly'].Blocks['__gas_MQ2_get_r0'] = {\n    init: function() {\n        this.jsonInit(__gas_MQ2_get_r0_json);\n    }\n};\n\nwindow['Blockly'].Python['__gas_MQ2_get_r0'] = function(block) {\n        return [`_r0`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"MQ2_CO_read":["window['Blockly'].Python['__gas_MQ2_CO_read'] = function(block) {\n    var PIN = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_NONE);\nvar R0 = Blockly.Python.valueToCode(block, 'R0', Blockly.Python.ORDER_NONE);\n    return [`int((((math.log10(((4096-analogRead(${PIN}))/ analogRead(${PIN}))/${R0}) - 0.716003343634799) / -0.335423996010616 + 2.301029995663981)*100))`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","int((((math.log10(((4096-analogRead(${PIN}))/ analogRead(${PIN}))/${R0}) - 0.716003343634799) / -0.335423996010616 + 2.301029995663981)*100))"],"MQ2_calib":["window['Blockly'].Python['__gas_MQ2_calib'] = function(block) {\n    var PIN = Blockly.Python.valueToCode(block, 'PIN', Blockly.Python.ORDER_NONE);\nvar N = Blockly.Python.valueToCode(block, 'N', Blockly.Python.ORDER_NONE);\n    return `global _r0 \n_r0 = 0\nfor i in (1 <= float(${N})) and upRange(1, float(${N}), 1) or downRange(1, float(${N}), 1):\n    _r0 = _r0 + (4096-analogRead(${PIN}))/analogRead(${PIN})\n    wait_ms(50)\n_r0 = _r0 / ${N}` + \"\\n\";\n};\n\n","global _r0 \n_r0 = 0\nfor i in (1 <= float(${N})) and upRange(1, float(${N}), 1) or downRange(1, float(${N}), 1):\n    _r0 = _r0 + (4096-analogRead(${PIN}))/analogRead(${PIN})\n    wait_ms(50)\n_r0 = _r0 / ${N}"],"MQ2_get_r0":["window['Blockly'].Python['__gas_MQ2_get_r0'] = function(block) {\n        return [`_r0`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","_r0"]}}